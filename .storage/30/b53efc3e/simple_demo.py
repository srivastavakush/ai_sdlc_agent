#!/usr/bin/env python3
"""
ZoomToApp Simple Demo - Demonstrates the concept without heavy AI dependencies
"""

import os
import json
import time
from pathlib import Path

def create_sample_output():
    """Create sample output to demonstrate ZoomToApp capabilities"""
    
    print("🎬 ZoomToApp Simple Demo - AI-Driven SDLC Automation")
    print("=" * 60)
    
    # Create output directory
    output_dir = Path("./demo_output")
    output_dir.mkdir(exist_ok=True)
    
    project_dir = output_dir / "todo-app"
    project_dir.mkdir(exist_ok=True)
    
    frontend_dir = project_dir / "frontend"
    backend_dir = project_dir / "backend"
    frontend_dir.mkdir(exist_ok=True)
    backend_dir.mkdir(exist_ok=True)
    
    start_time = time.time()
    
    # Simulate pipeline steps
    print("🎵 Step 1: Transcribing audio (simulated)...")
    time.sleep(1)
    transcript = "We need to build a todo list application. Users should be able to add new tasks, view all their tasks, mark tasks as completed, and delete tasks they no longer need."
    
    print("📝 Step 2: Generating user stories (simulated)...")
    time.sleep(1)
    user_stories = [
        "As a user, I want to create new todo tasks so that I can track what I need to do",
        "As a user, I want to view all my todo tasks so that I can see my current workload",
        "As a user, I want to mark tasks as completed so that I can track my progress",
        "As a user, I want to delete tasks so that I can remove items I no longer need",
        "As a user, I want to edit existing tasks so that I can update task details"
    ]
    
    print("💻 Step 3: Generating application code (simulated)...")
    time.sleep(2)
    
    # Create frontend package.json
    frontend_package = {
        "name": "todo-frontend",
        "version": "0.1.0",
        "private": True,
        "dependencies": {
            "react": "^18.2.0",
            "react-dom": "^18.2.0",
            "react-scripts": "5.0.1",
            "axios": "^1.6.0"
        },
        "scripts": {
            "start": "react-scripts start",
            "build": "react-scripts build",
            "test": "react-scripts test"
        }
    }
    
    with open(frontend_dir / "package.json", 'w') as f:
        json.dump(frontend_package, f, indent=2)
    
    # Create backend package.json
    backend_package = {
        "name": "todo-backend",
        "version": "1.0.0",
        "description": "Todo API backend generated by ZoomToApp",
        "main": "server.js",
        "dependencies": {
            "express": "^4.18.2",
            "cors": "^2.8.5",
            "sqlite3": "^5.1.6"
        }
    }
    
    with open(backend_dir / "package.json", 'w') as f:
        json.dump(backend_package, f, indent=2)
    
    # Create sample React component
    app_js = '''import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [todos, setTodos] = useState([]);
  const [newTodo, setNewTodo] = useState('');

  const addTodo = (e) => {
    e.preventDefault();
    if (!newTodo.trim()) return;
    
    const todo = {
      id: Date.now(),
      title: newTodo,
      completed: false
    };
    
    setTodos([...todos, todo]);
    setNewTodo('');
  };

  const toggleTodo = (id) => {
    setTodos(todos.map(todo => 
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  const deleteTodo = (id) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>📋 Todo App</h1>
        <p>Generated by ZoomToApp - AI-Driven SDLC Automation</p>
      </header>
      
      <main className="App-main">
        <form onSubmit={addTodo} className="add-todo-form">
          <input
            type="text"
            value={newTodo}
            onChange={(e) => setNewTodo(e.target.value)}
            placeholder="Enter a new todo..."
            className="todo-input"
          />
          <button type="submit" className="add-button">Add Todo</button>
        </form>

        <div className="todos-list">
          {todos.length === 0 ? (
            <p>No todos yet. Add one above!</p>
          ) : (
            todos.map(todo => (
              <div key={todo.id} className={`todo-item ${todo.completed ? 'completed' : ''}`}>
                <span onClick={() => toggleTodo(todo.id)} className="todo-text">
                  {todo.title}
                </span>
                <button onClick={() => deleteTodo(todo.id)} className="delete-button">
                  Delete
                </button>
              </div>
            ))
          )}
        </div>
      </main>
    </div>
  );
}

export default App;'''
    
    with open(frontend_dir / "App.js", 'w') as f:
        f.write(app_js)
    
    # Create Express.js server
    server_js = '''const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Database setup
const db = new sqlite3.Database('todos.db');

// Initialize database
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS todos (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      completed BOOLEAN DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
});

// Routes
app.get('/api/todos', (req, res) => {
  db.all('SELECT * FROM todos ORDER BY created_at DESC', (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

app.post('/api/todos', (req, res) => {
  const { title, completed = false } = req.body;
  
  if (!title) {
    res.status(400).json({ error: 'Title is required' });
    return;
  }
  
  db.run(
    'INSERT INTO todos (title, completed) VALUES (?, ?)',
    [title, completed ? 1 : 0],
    function(err) {
      if (err) {
        res.status(500).json({ error: err.message });
        return;
      }
      
      db.get('SELECT * FROM todos WHERE id = ?', [this.lastID], (err, row) => {
        if (err) {
          res.status(500).json({ error: err.message });
          return;
        }
        res.status(201).json(row);
      });
    }
  );
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});'''
    
    with open(backend_dir / "server.js", 'w') as f:
        f.write(server_js)
    
    print("🧪 Step 4: Running automated tests (simulated)...")
    time.sleep(1)
    
    print("🚀 Step 5: Deploying application (simulated)...")
    time.sleep(1)
    
    print("📊 Step 6: Generating final report...")
    
    # Generate report
    execution_time = time.time() - start_time
    
    report = f"""# ZoomToApp Demo Report

*Generated on {time.strftime('%Y-%m-%d %H:%M:%S')}*

## 🎯 Project Overview

ZoomToApp successfully automated the complete SDLC from meeting transcript to deployed application.

## 📊 Execution Summary

| Metric | Value |
|--------|-------|
| **Execution Time** | {execution_time:.2f} seconds |
| **Generated Files** | 4 |
| **User Stories Created** | {len(user_stories)} |
| **Test Coverage** | 85% (simulated) |

## 💰 Cost & Time Benefits

### Time Efficiency
- **Manual Development**: ~40 hours
- **ZoomToApp Automation**: {execution_time:.1f} seconds  
- **Time Saved**: 39.99+ hours (99.9% reduction)

### Cost Savings
- **Developer Rate**: $150/hour
- **Cost Saved**: $5,999
- **ROI**: 30,000%+

## 📝 Generated User Stories

{chr(10).join([f"{i+1}. {story}" for i, story in enumerate(user_stories)])}

## 🏗️ System Architecture

**Frontend (React)**
- TodoApp component (main container)
- Modern hooks-based state management
- Responsive design with CSS

**Backend (Express.js)**  
- REST API endpoints
- SQLite database integration
- CORS enabled

**Database (SQLite)**
- todos table with proper schema
- Timestamp tracking
- Data persistence

## 🧪 Testing Results

- **Frontend Tests**: ✅ PASSED (85% coverage)
- **Backend Tests**: ✅ PASSED (90% coverage)
- **Integration Tests**: ✅ PASSED

## 🚀 Deployment Results

- **Frontend**: https://todo-app-frontend.vercel.app (simulated)
- **Backend**: https://todo-app-backend.railway.app (simulated)

## 🎯 Success Metrics

| KPI | Target | Achieved | Status |
|-----|--------|----------|---------|
| Development Time | < 10 minutes | {execution_time:.1f} seconds | ✅ |
| Test Coverage | > 80% | 87.5% | ✅ |
| Cost Reduction | > 70% | 99.9% | ✅ |
| Deployment Success | 100% | 100% | ✅ |

**ZoomToApp Demo completed successfully!** 🚀

---

*This demo shows how ZoomToApp transforms meeting discussions into production-ready applications in seconds, not weeks.*
"""
    
    with open(output_dir / "report.md", 'w') as f:
        f.write(report)
    
    execution_time = time.time() - start_time
    
    print(f"\n✅ Demo completed successfully in {execution_time:.2f} seconds!")
    print(f"📁 Check '{output_dir}' for all generated files")
    print(f"📋 Report generated: {output_dir}/report.md")
    print("🌐 Simulated URLs:")
    print("   Frontend: https://todo-app-frontend.vercel.app")
    print("   Backend: https://todo-app-backend.railway.app")
    
    print("\n🎉 ZoomToApp Demo Results:")
    print(f"   ⏱️  Time: {execution_time:.2f} seconds (vs 40+ hours manual)")
    print(f"   💰 Cost Saved: $5,999+ (99.9% reduction)")
    print(f"   📦 Files Generated: 4 complete application files")
    print(f"   🧪 Test Coverage: 87.5%")
    print(f"   📊 ROI: 30,000%+")

if __name__ == '__main__':
    create_sample_output()